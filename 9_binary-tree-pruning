// https://leetcode.com/problems/binary-tree-pruning/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool is_one_present(TreeNode* node)
    {
        if(node == NULL)
        {
            return NULL ;
        }

        if(node->val == 1)
        {
            return true ;
        }

        return is_one_present(node->left) || is_one_present(node->right) ;
    }
    TreeNode* pruneTree(TreeNode* root) {
        if(root == NULL)
        {
            return NULL ;
        }

        if(is_one_present(root->left) == false)
        {
            root->left = NULL ;
        }

        if(is_one_present(root->right) == false)
        {
            root->right = NULL ;
        }

        pruneTree(root->left) ;
        pruneTree(root->right) ;

        if(root->left == NULL && root->right == NULL && root->val == 0)
        {
            return NULL ;
        }
        return root ;
    }
};
