// https://leetcode.com/problems/minimum-depth-of-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int dfs(TreeNode* node, int lev) {
        if (node == NULL) 
        {    
            return INT_MAX;
        }

        if (node->left == nullptr && node->right == nullptr) 
        {
            return lev;
        }
        int left_depth = dfs(node->left, lev + 1);
        int right_depth = dfs(node->right, lev + 1);

        return min(left_depth, right_depth);
    }

    int minDepth(TreeNode* root) {
        if (root == nullptr) 
        {
            return 0;
        }

        // Start dfs at level 1
        return dfs(root, 1);
    }
};
