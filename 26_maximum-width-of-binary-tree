// https://leetcode.com/problems/maximum-width-of-binary-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    #define ll unsigned long long
    int widthOfBinaryTree(TreeNode* root) {
        
        if(root == NULL)
        return 0 ;

        queue<pair<TreeNode* , ll>> q ;
        q.push({root , 0}) ;

        ll max_width = 0 ;

        while(!q.empty())
        {
            ll n = q.size() ;
            ll left = q.front().second ;
            ll right = q.back().second ;

            ll width = (right-left + 1) ;

            max_width = max(max_width , width) ;


            while(n--)
            {
                TreeNode* curr = q.front().first ;
                ll ind = q.front().second ;
                q.pop() ;

                if(curr->left)
                {
                    q.push({curr->left , 2*ind+1}) ;
                }

                if(curr->right)
                {
                    q.push({curr->right , 2*ind+2}) ;
                }
            }
        }
        return (int)max_width ;
    }
};
